Titre de la section,Contenu,Nom du professeur,Description du professeur,Titre de la vidéo,Source,Titre du cours,Durée du cours
Codez un site web accessible avec HTML & CSS,"Ce cours est visiblegratuitement en ligne. course.header.alt.is_video course.header.alt.is_certifying Mis à jour le 01/08/2023  Bonjour et bienvenue dans ce cours sur l’accessibilité sur le Web pour les développeurs. 🙂 Je m’appelle Thomas Dimnet, je suis le CTO de SensCritique, et mentor chez OpenClassrooms. Ce cours a pourobjectifde vous aider àintégrer une démarche d'accessibilité lors de vos développements web. Nous verrons notamment dans ce cours : les bonnes pratiques d’accessibilité à adopterquand vous développez votre page web ; les attributs ARIAqui vous aideront dans votre démarche d’accessibilité ; comment rendre accessibles les interactions, comme compléter un formulaire ou ouvrir une modale. Pour bien saisir l’ensemble de ce cours et appliquer les concepts dont nous allons parler, il vous est nécessaire d’être familier : avec le concept d’accessibilité, de connaître ce qu’est ARIA. Si ce n’est pas le cas, commencez par suivre le coursConcevez un contenu web accessible, avant de revenir sur ce cours ; le HTML et le CSS. En effet, ce cours va tirer parti de ces deux langages, notamment de nombreux attributs HTML, pour construire un site accessible. La connaissance du JavaScript n’est pas nécessaire pour suivre et comprendre ce cours. Chaque concept lié au JavaScript sera expliqué en détail dans des encarts info comme celui-ci. 🙂 Ce cours couvre de nombreux aspects de la programmation de site web prenant en compte les contraintes d’accessibilité. Selon votre profil, votre objectif, vous aurez plusieurs manières possibles de suivre ce cours : Si vous travaillez sur ungros projet de développement webet avez besoin de compétences sur l’ensemble de la programmation accessible, vous pouvez suivre le cours entier : lire le texte et faire les quiz pour vérifier vos connaissances. Dans ce cas, je vous conseille vivement d’appliquer en parallèle, grâce aux exemples donnés à la fin de chaque chapitre. Si vous ne travaillez que surune partie spécifique de la programmation web, un élément particulier d’une page, je vous invite à passer directement au chapitre en question. Si, enfin,vous vous intéressez à l’accessibilité weben général, sans nécessairement vouloir appliquer, en ce cas vous pouvez passer le cours en revu, lire les résumés de chapitres et ne rentrer dans le détail des textes que quand le sujet vous intéresse particulièrement. Dans ce cours, vous allez découvrir les techniques qui vont vous permettre de coder des sites web accessibles à tous ! Quand on pense à l’accessibilité, on pense souvent aux personnes ayant destroubles visuels. Mais le principe même del’accessibilité est de rendre un site ou une application web utilisable par le plus grand nombre. Autrement dit, vous vous adressez à un public qui peut avoir : desdéficiences visuelles(aveugles, daltoniens, personnes ayant des glaucomes, etc.) ; desdéficiences de motricité(pour des personnes ayant subi un AVC, par exemple) ; une connaissance limitée devotre langue(publics étrangers). Par exemple, admettons que votre site dispose de vidéos. Le fait de les sous-titrer va les rendre accessibles aux personnes ayant des problèmes auditifs. Mais cela va aussi permettre aux personnes n’ayant pas de son sur leur ordinateur, ou à ceux ne parlant pas votre langue, de les comprendre. Faire un site web accessible, c’est donc créer un site utilisable et compréhensible pour le plus grand nombre de personnes. Vous trouverez dans ce cours : du textevous permettant : deprésenter les notionsen détail et donner des conseils, de donner desexemplesdes concepts que je présente, departager des liensvers des ressources complémentaires, telles que des articles de blog ; des quizvous permettant de valider les connaissances acquises durant le cours ; et, enfin,un projet “Tonight in Gotham” qui nous servira de cas d’applicationtout au long des chapitres. À chaque fin de chapitre, vous trouverez un cas pratique d'application des concepts à ce projet. Comme toujours avec les cours OpenClassrooms, il est important de pratiquer tout au long de ce cours. Je vous invite donc à essayer d’appliquer le plus possible les concepts. Vous pouvez, par exemple, le faire : via vos projets OpenClassrooms si vous suivez un parcours chez nous ; via un projet personnel (c’est souvent le bon moment de tester une nouvelle technologie ou un nouveau concept et de le faire progressivement) ; via votre travail (si vous êtes déjà développeur), en en parlant à vos collègues et/ou en essayant de l’intégrer à votre entreprise. En plus des snippets de code et des exemples d’applicationque vous allez pouvoir voir durant ce cours,nous allons travailler sur un projet. Ce projet va être lefil rouge de notre cours. Pour chaque chapitre de chaque partie,le cours se divisera généralement en deux grandes sections: une ou plusieurs sectionsnotions + exemples, où je vous expliquerai les concepts et où je vous donnerai des exemples d’application ; une dernière section où nous intégrerons ensemble la maquette d’une landing page au fil des chapitres. Vous pouvez dès à présent télécharger les sources du projet créé que nous allons implémentersur ce projet Figma. Vous pouvez trouver le code source de cette application sur cerepository GitHub. À chaque fin de chapitre, vous trouverez un lien GitHub qui vous permettra de voir l’état du code une fois les étapes du chapitre implémentées. Vous n’avez pas besoin de maîtriser Git et GitHub pour réaliser ce cours. Néanmoins, être familier avec le versioning, et notamment avec le concept de branche, va vous permettre de vous repérer plus facilement dans les modifications effectuées entre chaque chapitre. Pour en savoir plus sur l’utilisation de Git et GitHub, je vous invite à suivre le coursGérez du code avec Git et GitHub. Pour que vous puissiez mettre en pratique ce que nous allons voir dans ce cours, nous allons travailler sur un projet de création d’une page de blog. Notre projet va donc porter sur Batman ! Vous pouvez voir sur la maquette ci-dessus qu’il est composé : d’un header avec un menu de navigation, une barre de recherche et un menu déroulant ; du corps principal avec le corps du texte, ainsi que d’une image ; d’un footer comprenant un second menu de navigation et des liens vers les réseaux sociaux. Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Thomas Dimnet,"Si vous aimez mes cours, vous aimerez : beta.nx.academy","
                            Tirez le maximum de ce cours - Codez un site web accessible avec HTML & CSS - OpenClassrooms
                    ",https://vimeo.com/472965194/,Codez un site web accessible avec HTML & CSS,6 heures
Tirez le maximum de ce cours," Bonjour et bienvenue dans ce cours sur l’accessibilité sur le Web pour les développeurs. 🙂 Je m’appelle Thomas Dimnet, je suis le CTO de SensCritique, et mentor chez OpenClassrooms. Ce cours a pourobjectifde vous aider àintégrer une démarche d'accessibilité lors de vos développements web. Nous verrons notamment dans ce cours : les bonnes pratiques d’accessibilité à adopterquand vous développez votre page web ; les attributs ARIAqui vous aideront dans votre démarche d’accessibilité ; comment rendre accessibles les interactions, comme compléter un formulaire ou ouvrir une modale. Pour bien saisir l’ensemble de ce cours et appliquer les concepts dont nous allons parler, il vous est nécessaire d’être familier : avec le concept d’accessibilité, de connaître ce qu’est ARIA. Si ce n’est pas le cas, commencez par suivre le coursConcevez un contenu web accessible, avant de revenir sur ce cours ; le HTML et le CSS. En effet, ce cours va tirer parti de ces deux langages, notamment de nombreux attributs HTML, pour construire un site accessible. La connaissance du JavaScript n’est pas nécessaire pour suivre et comprendre ce cours. Chaque concept lié au JavaScript sera expliqué en détail dans des encarts info comme celui-ci. 🙂 Ce cours couvre de nombreux aspects de la programmation de site web prenant en compte les contraintes d’accessibilité. Selon votre profil, votre objectif, vous aurez plusieurs manières possibles de suivre ce cours : Si vous travaillez sur ungros projet de développement webet avez besoin de compétences sur l’ensemble de la programmation accessible, vous pouvez suivre le cours entier : lire le texte et faire les quiz pour vérifier vos connaissances. Dans ce cas, je vous conseille vivement d’appliquer en parallèle, grâce aux exemples donnés à la fin de chaque chapitre. Si vous ne travaillez que surune partie spécifique de la programmation web, un élément particulier d’une page, je vous invite à passer directement au chapitre en question. Si, enfin,vous vous intéressez à l’accessibilité weben général, sans nécessairement vouloir appliquer, en ce cas vous pouvez passer le cours en revu, lire les résumés de chapitres et ne rentrer dans le détail des textes que quand le sujet vous intéresse particulièrement. Dans ce cours, vous allez découvrir les techniques qui vont vous permettre de coder des sites web accessibles à tous ! Quand on pense à l’accessibilité, on pense souvent aux personnes ayant destroubles visuels. Mais le principe même del’accessibilité est de rendre un site ou une application web utilisable par le plus grand nombre. Autrement dit, vous vous adressez à un public qui peut avoir : desdéficiences visuelles(aveugles, daltoniens, personnes ayant des glaucomes, etc.) ; desdéficiences de motricité(pour des personnes ayant subi un AVC, par exemple) ; une connaissance limitée devotre langue(publics étrangers). Par exemple, admettons que votre site dispose de vidéos. Le fait de les sous-titrer va les rendre accessibles aux personnes ayant des problèmes auditifs. Mais cela va aussi permettre aux personnes n’ayant pas de son sur leur ordinateur, ou à ceux ne parlant pas votre langue, de les comprendre. Faire un site web accessible, c’est donc créer un site utilisable et compréhensible pour le plus grand nombre de personnes. Vous trouverez dans ce cours : du textevous permettant : deprésenter les notionsen détail et donner des conseils, de donner desexemplesdes concepts que je présente, departager des liensvers des ressources complémentaires, telles que des articles de blog ; des quizvous permettant de valider les connaissances acquises durant le cours ; et, enfin,un projet “Tonight in Gotham” qui nous servira de cas d’applicationtout au long des chapitres. À chaque fin de chapitre, vous trouverez un cas pratique d'application des concepts à ce projet. Comme toujours avec les cours OpenClassrooms, il est important de pratiquer tout au long de ce cours. Je vous invite donc à essayer d’appliquer le plus possible les concepts. Vous pouvez, par exemple, le faire : via vos projets OpenClassrooms si vous suivez un parcours chez nous ; via un projet personnel (c’est souvent le bon moment de tester une nouvelle technologie ou un nouveau concept et de le faire progressivement) ; via votre travail (si vous êtes déjà développeur), en en parlant à vos collègues et/ou en essayant de l’intégrer à votre entreprise. En plus des snippets de code et des exemples d’applicationque vous allez pouvoir voir durant ce cours,nous allons travailler sur un projet. Ce projet va être lefil rouge de notre cours. Pour chaque chapitre de chaque partie,le cours se divisera généralement en deux grandes sections: une ou plusieurs sectionsnotions + exemples, où je vous expliquerai les concepts et où je vous donnerai des exemples d’application ; une dernière section où nous intégrerons ensemble la maquette d’une landing page au fil des chapitres. Vous pouvez dès à présent télécharger les sources du projet créé que nous allons implémentersur ce projet Figma. Vous pouvez trouver le code source de cette application sur cerepository GitHub. À chaque fin de chapitre, vous trouverez un lien GitHub qui vous permettra de voir l’état du code une fois les étapes du chapitre implémentées. Vous n’avez pas besoin de maîtriser Git et GitHub pour réaliser ce cours. Néanmoins, être familier avec le versioning, et notamment avec le concept de branche, va vous permettre de vous repérer plus facilement dans les modifications effectuées entre chaque chapitre. Pour en savoir plus sur l’utilisation de Git et GitHub, je vous invite à suivre le coursGérez du code avec Git et GitHub. Pour que vous puissiez mettre en pratique ce que nous allons voir dans ce cours, nous allons travailler sur un projet de création d’une page de blog. Notre projet va donc porter sur Batman ! Vous pouvez voir sur la maquette ci-dessus qu’il est composé : d’un header avec un menu de navigation, une barre de recherche et un menu déroulant ; du corps principal avec le corps du texte, ainsi que d’une image ; d’un footer comprenant un second menu de navigation et des liens vers les réseaux sociaux. Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.","
                            Créez le squelette de votre page web - Codez un site web accessible avec HTML & CSS - OpenClassrooms
                    ",https://vimeo.com/472965212/,Codez un site web accessible avec HTML & CSS,6 heures
Comment suivre ce cours ?,"Ce cours couvre de nombreux aspects de la programmation de site web prenant en compte les contraintes d’accessibilité. Selon votre profil, votre objectif, vous aurez plusieurs manières possibles de suivre ce cours : Si vous travaillez sur ungros projet de développement webet avez besoin de compétences sur l’ensemble de la programmation accessible, vous pouvez suivre le cours entier : lire le texte et faire les quiz pour vérifier vos connaissances. Dans ce cas, je vous conseille vivement d’appliquer en parallèle, grâce aux exemples donnés à la fin de chaque chapitre. Si vous ne travaillez que surune partie spécifique de la programmation web, un élément particulier d’une page, je vous invite à passer directement au chapitre en question. Si, enfin,vous vous intéressez à l’accessibilité weben général, sans nécessairement vouloir appliquer, en ce cas vous pouvez passer le cours en revu, lire les résumés de chapitres et ne rentrer dans le détail des textes que quand le sujet vous intéresse particulièrement. Dans ce cours, vous allez découvrir les techniques qui vont vous permettre de coder des sites web accessibles à tous ! Quand on pense à l’accessibilité, on pense souvent aux personnes ayant destroubles visuels. Mais le principe même del’accessibilité est de rendre un site ou une application web utilisable par le plus grand nombre. Autrement dit, vous vous adressez à un public qui peut avoir : desdéficiences visuelles(aveugles, daltoniens, personnes ayant des glaucomes, etc.) ; desdéficiences de motricité(pour des personnes ayant subi un AVC, par exemple) ; une connaissance limitée devotre langue(publics étrangers). Par exemple, admettons que votre site dispose de vidéos. Le fait de les sous-titrer va les rendre accessibles aux personnes ayant des problèmes auditifs. Mais cela va aussi permettre aux personnes n’ayant pas de son sur leur ordinateur, ou à ceux ne parlant pas votre langue, de les comprendre. Faire un site web accessible, c’est donc créer un site utilisable et compréhensible pour le plus grand nombre de personnes. Vous trouverez dans ce cours : du textevous permettant : deprésenter les notionsen détail et donner des conseils, de donner desexemplesdes concepts que je présente, departager des liensvers des ressources complémentaires, telles que des articles de blog ; des quizvous permettant de valider les connaissances acquises durant le cours ; et, enfin,un projet “Tonight in Gotham” qui nous servira de cas d’applicationtout au long des chapitres. À chaque fin de chapitre, vous trouverez un cas pratique d'application des concepts à ce projet. Comme toujours avec les cours OpenClassrooms, il est important de pratiquer tout au long de ce cours. Je vous invite donc à essayer d’appliquer le plus possible les concepts. Vous pouvez, par exemple, le faire : via vos projets OpenClassrooms si vous suivez un parcours chez nous ; via un projet personnel (c’est souvent le bon moment de tester une nouvelle technologie ou un nouveau concept et de le faire progressivement) ; via votre travail (si vous êtes déjà développeur), en en parlant à vos collègues et/ou en essayant de l’intégrer à votre entreprise. En plus des snippets de code et des exemples d’applicationque vous allez pouvoir voir durant ce cours,nous allons travailler sur un projet. Ce projet va être lefil rouge de notre cours. Pour chaque chapitre de chaque partie,le cours se divisera généralement en deux grandes sections: une ou plusieurs sectionsnotions + exemples, où je vous expliquerai les concepts et où je vous donnerai des exemples d’application ; une dernière section où nous intégrerons ensemble la maquette d’une landing page au fil des chapitres. Vous pouvez dès à présent télécharger les sources du projet créé que nous allons implémentersur ce projet Figma. Vous pouvez trouver le code source de cette application sur cerepository GitHub. À chaque fin de chapitre, vous trouverez un lien GitHub qui vous permettra de voir l’état du code une fois les étapes du chapitre implémentées. Vous n’avez pas besoin de maîtriser Git et GitHub pour réaliser ce cours. Néanmoins, être familier avec le versioning, et notamment avec le concept de branche, va vous permettre de vous repérer plus facilement dans les modifications effectuées entre chaque chapitre. Pour en savoir plus sur l’utilisation de Git et GitHub, je vous invite à suivre le coursGérez du code avec Git et GitHub. Pour que vous puissiez mettre en pratique ce que nous allons voir dans ce cours, nous allons travailler sur un projet de création d’une page de blog. Notre projet va donc porter sur Batman ! Vous pouvez voir sur la maquette ci-dessus qu’il est composé : d’un header avec un menu de navigation, une barre de recherche et un menu déroulant ; du corps principal avec le corps du texte, ainsi que d’une image ; d’un footer comprenant un second menu de navigation et des liens vers les réseaux sociaux. Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Familiarisez-vous avec le contenu du cours,"Dans ce cours, vous allez découvrir les techniques qui vont vous permettre de coder des sites web accessibles à tous ! Quand on pense à l’accessibilité, on pense souvent aux personnes ayant destroubles visuels. Mais le principe même del’accessibilité est de rendre un site ou une application web utilisable par le plus grand nombre. Autrement dit, vous vous adressez à un public qui peut avoir : desdéficiences visuelles(aveugles, daltoniens, personnes ayant des glaucomes, etc.) ; desdéficiences de motricité(pour des personnes ayant subi un AVC, par exemple) ; une connaissance limitée devotre langue(publics étrangers). Par exemple, admettons que votre site dispose de vidéos. Le fait de les sous-titrer va les rendre accessibles aux personnes ayant des problèmes auditifs. Mais cela va aussi permettre aux personnes n’ayant pas de son sur leur ordinateur, ou à ceux ne parlant pas votre langue, de les comprendre. Faire un site web accessible, c’est donc créer un site utilisable et compréhensible pour le plus grand nombre de personnes. Vous trouverez dans ce cours : du textevous permettant : deprésenter les notionsen détail et donner des conseils, de donner desexemplesdes concepts que je présente, departager des liensvers des ressources complémentaires, telles que des articles de blog ; des quizvous permettant de valider les connaissances acquises durant le cours ; et, enfin,un projet “Tonight in Gotham” qui nous servira de cas d’applicationtout au long des chapitres. À chaque fin de chapitre, vous trouverez un cas pratique d'application des concepts à ce projet. Comme toujours avec les cours OpenClassrooms, il est important de pratiquer tout au long de ce cours. Je vous invite donc à essayer d’appliquer le plus possible les concepts. Vous pouvez, par exemple, le faire : via vos projets OpenClassrooms si vous suivez un parcours chez nous ; via un projet personnel (c’est souvent le bon moment de tester une nouvelle technologie ou un nouveau concept et de le faire progressivement) ; via votre travail (si vous êtes déjà développeur), en en parlant à vos collègues et/ou en essayant de l’intégrer à votre entreprise. En plus des snippets de code et des exemples d’applicationque vous allez pouvoir voir durant ce cours,nous allons travailler sur un projet. Ce projet va être lefil rouge de notre cours. Pour chaque chapitre de chaque partie,le cours se divisera généralement en deux grandes sections: une ou plusieurs sectionsnotions + exemples, où je vous expliquerai les concepts et où je vous donnerai des exemples d’application ; une dernière section où nous intégrerons ensemble la maquette d’une landing page au fil des chapitres. Vous pouvez dès à présent télécharger les sources du projet créé que nous allons implémentersur ce projet Figma. Vous pouvez trouver le code source de cette application sur cerepository GitHub. À chaque fin de chapitre, vous trouverez un lien GitHub qui vous permettra de voir l’état du code une fois les étapes du chapitre implémentées. Vous n’avez pas besoin de maîtriser Git et GitHub pour réaliser ce cours. Néanmoins, être familier avec le versioning, et notamment avec le concept de branche, va vous permettre de vous repérer plus facilement dans les modifications effectuées entre chaque chapitre. Pour en savoir plus sur l’utilisation de Git et GitHub, je vous invite à suivre le coursGérez du code avec Git et GitHub. Pour que vous puissiez mettre en pratique ce que nous allons voir dans ce cours, nous allons travailler sur un projet de création d’une page de blog. Notre projet va donc porter sur Batman ! Vous pouvez voir sur la maquette ci-dessus qu’il est composé : d’un header avec un menu de navigation, une barre de recherche et un menu déroulant ; du corps principal avec le corps du texte, ainsi que d’une image ; d’un footer comprenant un second menu de navigation et des liens vers les réseaux sociaux. Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Appliquez les concepts clés grâce au projet fil rouge,"En plus des snippets de code et des exemples d’applicationque vous allez pouvoir voir durant ce cours,nous allons travailler sur un projet. Ce projet va être lefil rouge de notre cours. Pour chaque chapitre de chaque partie,le cours se divisera généralement en deux grandes sections: une ou plusieurs sectionsnotions + exemples, où je vous expliquerai les concepts et où je vous donnerai des exemples d’application ; une dernière section où nous intégrerons ensemble la maquette d’une landing page au fil des chapitres. Vous pouvez dès à présent télécharger les sources du projet créé que nous allons implémentersur ce projet Figma. Vous pouvez trouver le code source de cette application sur cerepository GitHub. À chaque fin de chapitre, vous trouverez un lien GitHub qui vous permettra de voir l’état du code une fois les étapes du chapitre implémentées. Vous n’avez pas besoin de maîtriser Git et GitHub pour réaliser ce cours. Néanmoins, être familier avec le versioning, et notamment avec le concept de branche, va vous permettre de vous repérer plus facilement dans les modifications effectuées entre chaque chapitre. Pour en savoir plus sur l’utilisation de Git et GitHub, je vous invite à suivre le coursGérez du code avec Git et GitHub. Pour que vous puissiez mettre en pratique ce que nous allons voir dans ce cours, nous allons travailler sur un projet de création d’une page de blog. Notre projet va donc porter sur Batman ! Vous pouvez voir sur la maquette ci-dessus qu’il est composé : d’un header avec un menu de navigation, une barre de recherche et un menu déroulant ; du corps principal avec le corps du texte, ainsi que d’une image ; d’un footer comprenant un second menu de navigation et des liens vers les réseaux sociaux. Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Le projet “Tonight in Gotham”,"Pour que vous puissiez mettre en pratique ce que nous allons voir dans ce cours, nous allons travailler sur un projet de création d’une page de blog. Notre projet va donc porter sur Batman ! Vous pouvez voir sur la maquette ci-dessus qu’il est composé : d’un header avec un menu de navigation, une barre de recherche et un menu déroulant ; du corps principal avec le corps du texte, ainsi que d’une image ; d’un footer comprenant un second menu de navigation et des liens vers les réseaux sociaux. Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
En résumé,"Ce cours inclut des textes, un projet fil rouge réalisé sous forme de screencast ainsi que des quizzes. Le projet de landing page vu tout au long du cours va vous permettre de mettre en pratique les éléments clés vus durant le cours. Vous devez avoir un peu pratiqué le HTML/CSS pour saisir l’ensemble du cours. Nous allons maintenant voir comment créer un squelette de page accessible, en utilisant la sémantique et les attributs ARIA. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Codez un site web accessible avec HTML & CSS,"Ce cours est visiblegratuitement en ligne. course.header.alt.is_video course.header.alt.is_certifying Mis à jour le 01/08/2023 La première chose à faire, quand vousconcevez votre page web, est depenser à son squelette. En effet, bien concevoir cette structure va vous permettre dedélimiter les différentes zones de votre page. Autrement dit, vous allez pouvoir indiquer : les zones qui sont dédiées à lanavigation; les zones relatives aucontenu principalde votre page, ainsi que celles apportant des informations complémentaires ; et, enfin, les zones complémentaires, comme une barre de recherche ou une bannière. Nous allons donc voir ensemble comment : tirer parti desbalises sémantiques HTML5; utiliser les attributsrole; utiliserles ARIApour définir différents types dezonesdans votre page. Si vous n'êtes pas à l'aise avec l'utilisation des différentes balises en HTML, je vous invite à suivre le cours “Apprenez à créer votre site web avec HTML5 et CSS3” avant de poursuivre. Les balises HTML5 (header,nav,main,section…) vous permettent de définir simplement des zones, ourégions, à votre page.Elles sont liées au HTML sémantique. La sémantique, en HTML, est l’utilisation de balises ayant un sens. Quand vous utilisez une balisearticlepour un article de blog ounavpour votre menu de navigation, vous attribuez explicitement unrôleà cet élément. A contrario, quand vous utilisez une balise div ou span, cette dernière n’est porteuse d’aucune information. Elle ne nous renseigne pas sur son rôle. Si la sémantique vous intéresse, je vous invite à lire l’excellent livreAdaptive Web Designainsi quecet article du blog SEMrush. Afin de faciliter la lecture de votre page par des outils d’accessibilité, nous allons voir comment utiliser les bonnes balises pour structurer votre page. Sachezqu’une mauvaise utilisation ou une absence de balisene permettra pas aux technologies d'assistance de bien traduire le site. Grâce au HTML5, nous pouvons définir, de façon native, différentes régions à notre page.Elles donnent du sens au différentes zones de votre page. Voici un bref rappel des balises HTML5 à utiliser, ainsi que de leur signification sémantique : L’en-tête de la page; peut contenir le logo, une barre de recherche et le menu de navigation. Peut aussi être utilisé à l’intérieur d’une balise article ou section. Dans ce cas, le header ne sera associé qu’à cette section, et non à la page toute entière. Utilisé pour identifier le menu de navigation de la page. Sur certains projets, vous aurez parfois plusieurs blocs de navigation. Il vous faudra utiliser les labelsARIApour préciser de quelle navigation il s’agit. Les attributs ARIA (pourAccessible Rich Internet Applications) sont unensemble d’attributs HTMLqui vont vous permettre de rendre vos applications accessibles. Si vous n’êtes pas encore totalement familier avec, vous pouvez dès à présent suivre le coursConcevez un contenu web accessible. Par exemple : Dans l’exemple ci-dessous, vous pouvez voir deux menus de navigation (un principal et un secondaire). Ces derniers sont identifiés par des attributsaria-labelqui renseignent sur le type de navigation de ces blocs. Source :Documentation de Bootstrap. Utilisé pour identifier la région principale de votre page; le contenu à l’intérieur est susceptible de changer selon les pages (à la différence de votre menu de navigation). Balise regroupant un même sujet ou une même fonctionnalité. Commence généralement par un titre. Article de blog, ou recette de cuisine, par exemple. Balise regroupant uncontenu complémentairedu contenu principal. Balise de conclusion (soit pour la page entière, soit pour une section). Comme avec le header, vous pouvez intégrer un footer dans un article ou dans une section. Cela dit, il faudra penser à intégrer un aria de type label pour définir en quoi cette région est différente de vos autres balises footer au sein de votre page. Maintenant que nous avons revu les principales balises du HTML5, nous allons commencer à utiliser les attributs ARIA pour aller plus loin. En complément des balises sémantiques du HTML5, vous pouvez tout à fait utiliser lesattributsrolepour avoir unecompatibilité renforcéeavec l’ensemble des navigateurs. Selon le W3C, les attributs ARIA peuvent définir : la naturede l’élément (un menu de navigation, par exemple) ; l’actionde l’élément (il ouvre une modale) ; l’étatde l’élément (un menu dropdown ouvert ou fermé, par exemple). Ces attributs auront parfois le même sens que les balises HTML5 (pour les balises type nav ou header, par exemple). Cela dit, parfois, ces attributs apporterontun sens bien plus précispour une barre de recherche ou une bannière, par exemple. Source : code extrait de lapage d’accueil de GitHub. Par exemple, dans le code ci-dessus, nous pouvons constater que : on a donné à ladivun rôle de recherche ; sa fonction précise est de chercher un repository GitHub. Les versions modernes de nos navigateurs préférés (Firefox, Chrome, Safari) supportent très bien le HTML5 et n’ont pas besoin de ces attributs pour comprendre le sens et le rôle d’une balise. Cela dit, quand on pense accessibilité, il faut toujours penser au plus grand nombre et auxnavigateurs qu’utilisent vos utilisateurs. Par exemple, il se peut que : vos utilisateurs n’utilisent pas des navigateurs modernes parce qu’ils n’y sont pas autorisés. Dans les grandes entreprises, votre machine estconfigurée par la DSI. Vous n’aurez pas le choix concernant votre navigateur et vos outils ; leur matériel ne permette pas l’installation des versions récentes des grands navigateurs. Windows XP est encore aujourd’hui très utilisé. Selondeveloppez.com,Windows XP occupe encore une certaine part du marché total des OS. Cela peut sembler peu, mais comme je vous le disais précédemment, l’accessibilité, c’est aussi essayer de penser au plus grand nombre. Un exemple que je prends assez souvent : pendant très longtemps, les ordinateurs de l’Éducation nationale n’autorisaient pas l'exécution du JavaScript. Ainsi, vous deviez prendre cela en compte lors de vos développements. Autre point à avoir en tête : Android est actuellementl’OS le plus utilisé sous mobile. Cela dit, Android 11 est majoritairement utilisée, avec23% de parts de marché, suivi de près par Android 10 et Android 13. Ces versions les plus anciennes, notamment les 4 et 5, ont parfois des difficultés à parcourir des sites réalisés via desframeworks JavaScript. Dans le cas de la structuration de votre page HTML, le principe de l’attributrolesera de définir avec plus de précisionl’utilité ou la fonctiond’un élément ou d’un groupe d’éléments. Nous avons plus haut un exemple avecl’attributrole=”search”quipermet d’identifierqu’une section de la page est dédiée à unefonctionnalité de recherche. Voici un deuxième exemple, cette fois-ci en rapport avec un svg : Dans le code ci-dessus, nous pouvons voir quel’attribut role a pour valeurimg. Ce rôle permet au screen reader d’identifier cet élément comme une image. Ici, la balisetitlepermet de donner le rôle à l’image. Pour connaître tous les rôles existants, je vous invite à vous référer àla liste de rôles fournie par le W3C. Il arrive parfois que votrepage comprenne plusieurs balises de même type. Par exemple, votre page contient plusieurs menus de navigation ou plusieurs balisesasidepour des contenus complémentaires. Vous vous en souvenez peut-être, je vous ai déjà présenté cette balise, ou du moins, vous l’avez déjà vue. :)L’aria-label permet de nommer une région de façon “invisible”. En fait, ce n’est pas tout à fait invisible, puisque l’information est à destination des équipements d’assistance, tels qu’un screen-reader. Vous allez utiliser cet attribut pour donner unlibelléà votre région. Par exemple, vous pouvez utiliser l’aria-label pour : identifier plusieurs menus de navigation:aria-label=”Navigation Principale”etaria-label=”Navigation Secondaire”; distinguer plusieurs zones de contenu complémentaires(aside). Sur un site de recettes, un aside pourrait être dédié aux ustensiles de la recette, tandis que l’autre serait plutôt pour du contenu publicitaire. Dans le cas où votre conteneur – une section ou un menu de navigation, par exemple – comprend un titre descriptif, vous allez pouvoir faire“pointer” le conteneur vers ce titrepour donner un sens à cette section. Si on reprend l’exemple de GitHub et des repository vu précédemment, vous pouvez voir que la valeur de l’attributlabelledbyfait référence au titre de cette section. Autrement dit, elle permet d’identifier cette section (par les screen readers) comme un groupement de liens vers des repositories. L’avantage de cette méthode est sa plus grandecompatibilitéavec d’anciens navigateurs. Cela dit, la valeur de l’attributlabelledbypointe vers un attribut id. Ce sera donc un élément présent une seule fois sur la page. Dans cette section, nous reprenons le projetTonight In Gothamet l’implémentons peu à peu, pour mettre en pratique les compétences vues dans le chapitre. Retrouvez le code complet du projet que j’ai codé en respectant les bonnes pratiques d’accessibilité surce projet GitHub. L’objectif de ce projet n’est pas de se concentrer sur le HTML ou le CSS en lui-même, mais bien sur ses impacts sur l’accessibilité, et sur les règles à respecter pour le rendre utilisable par le plus grand nombre. Parmi les maquettes présentes dans le Figma fourni par les designers, la maquette ci-dessous est particulièrement pratique, car elle vous permet de voir les différentes parties composant le projet. J’ai implémenté le code de la page web en essayant de prendre le plus possible en compte toutes les recommandations d’accessibilité que je vous explique dans ce cours. En vous rendant sur le code HTML du projet, vous pouvez voir les élémentsstructurantssuivants : Les balises utilisées pour structurer la page sontsémantiques. Notre page est composée d’une baliseheader, d’une balisemainet d’une balisefooter. La baliseheaderutilise l’attributrole=”banner”qui permet d’indiquer que cet élément est l’en-tête principal : La balisefooterutilise l’attributrole=”contentinfo”. De plus, comme notre projet utilise plusieurs menus de navigation, nous les différencions grâce aux attributsaria-label(où l’un est le menu de navigation principal et l’autre le menu de navigation du pied de page) : Enfin, vous pouvez constater qu’il y a un champ de recherche. Comme nous l’avons vu dans le cours, ce champ est identifié comme champ de recherche via l’attributrole=”search”. Maintenant que les grands éléments structurant notre page sont en place, nous allons pouvoir nous intéresser à lanavigation. Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Créez le squelette de votre page web,"La première chose à faire, quand vousconcevez votre page web, est depenser à son squelette. En effet, bien concevoir cette structure va vous permettre dedélimiter les différentes zones de votre page. Autrement dit, vous allez pouvoir indiquer : les zones qui sont dédiées à lanavigation; les zones relatives aucontenu principalde votre page, ainsi que celles apportant des informations complémentaires ; et, enfin, les zones complémentaires, comme une barre de recherche ou une bannière. Nous allons donc voir ensemble comment : tirer parti desbalises sémantiques HTML5; utiliser les attributsrole; utiliserles ARIApour définir différents types dezonesdans votre page. Si vous n'êtes pas à l'aise avec l'utilisation des différentes balises en HTML, je vous invite à suivre le cours “Apprenez à créer votre site web avec HTML5 et CSS3” avant de poursuivre. Les balises HTML5 (header,nav,main,section…) vous permettent de définir simplement des zones, ourégions, à votre page.Elles sont liées au HTML sémantique. La sémantique, en HTML, est l’utilisation de balises ayant un sens. Quand vous utilisez une balisearticlepour un article de blog ounavpour votre menu de navigation, vous attribuez explicitement unrôleà cet élément. A contrario, quand vous utilisez une balise div ou span, cette dernière n’est porteuse d’aucune information. Elle ne nous renseigne pas sur son rôle. Si la sémantique vous intéresse, je vous invite à lire l’excellent livreAdaptive Web Designainsi quecet article du blog SEMrush. Afin de faciliter la lecture de votre page par des outils d’accessibilité, nous allons voir comment utiliser les bonnes balises pour structurer votre page. Sachezqu’une mauvaise utilisation ou une absence de balisene permettra pas aux technologies d'assistance de bien traduire le site. Grâce au HTML5, nous pouvons définir, de façon native, différentes régions à notre page.Elles donnent du sens au différentes zones de votre page. Voici un bref rappel des balises HTML5 à utiliser, ainsi que de leur signification sémantique : L’en-tête de la page; peut contenir le logo, une barre de recherche et le menu de navigation. Peut aussi être utilisé à l’intérieur d’une balise article ou section. Dans ce cas, le header ne sera associé qu’à cette section, et non à la page toute entière. Utilisé pour identifier le menu de navigation de la page. Sur certains projets, vous aurez parfois plusieurs blocs de navigation. Il vous faudra utiliser les labelsARIApour préciser de quelle navigation il s’agit. Les attributs ARIA (pourAccessible Rich Internet Applications) sont unensemble d’attributs HTMLqui vont vous permettre de rendre vos applications accessibles. Si vous n’êtes pas encore totalement familier avec, vous pouvez dès à présent suivre le coursConcevez un contenu web accessible. Par exemple : Dans l’exemple ci-dessous, vous pouvez voir deux menus de navigation (un principal et un secondaire). Ces derniers sont identifiés par des attributsaria-labelqui renseignent sur le type de navigation de ces blocs. Source :Documentation de Bootstrap. Utilisé pour identifier la région principale de votre page; le contenu à l’intérieur est susceptible de changer selon les pages (à la différence de votre menu de navigation). Balise regroupant un même sujet ou une même fonctionnalité. Commence généralement par un titre. Article de blog, ou recette de cuisine, par exemple. Balise regroupant uncontenu complémentairedu contenu principal. Balise de conclusion (soit pour la page entière, soit pour une section). Comme avec le header, vous pouvez intégrer un footer dans un article ou dans une section. Cela dit, il faudra penser à intégrer un aria de type label pour définir en quoi cette région est différente de vos autres balises footer au sein de votre page. Maintenant que nous avons revu les principales balises du HTML5, nous allons commencer à utiliser les attributs ARIA pour aller plus loin. En complément des balises sémantiques du HTML5, vous pouvez tout à fait utiliser lesattributsrolepour avoir unecompatibilité renforcéeavec l’ensemble des navigateurs. Selon le W3C, les attributs ARIA peuvent définir : la naturede l’élément (un menu de navigation, par exemple) ; l’actionde l’élément (il ouvre une modale) ; l’étatde l’élément (un menu dropdown ouvert ou fermé, par exemple). Ces attributs auront parfois le même sens que les balises HTML5 (pour les balises type nav ou header, par exemple). Cela dit, parfois, ces attributs apporterontun sens bien plus précispour une barre de recherche ou une bannière, par exemple. Source : code extrait de lapage d’accueil de GitHub. Par exemple, dans le code ci-dessus, nous pouvons constater que : on a donné à ladivun rôle de recherche ; sa fonction précise est de chercher un repository GitHub. Les versions modernes de nos navigateurs préférés (Firefox, Chrome, Safari) supportent très bien le HTML5 et n’ont pas besoin de ces attributs pour comprendre le sens et le rôle d’une balise. Cela dit, quand on pense accessibilité, il faut toujours penser au plus grand nombre et auxnavigateurs qu’utilisent vos utilisateurs. Par exemple, il se peut que : vos utilisateurs n’utilisent pas des navigateurs modernes parce qu’ils n’y sont pas autorisés. Dans les grandes entreprises, votre machine estconfigurée par la DSI. Vous n’aurez pas le choix concernant votre navigateur et vos outils ; leur matériel ne permette pas l’installation des versions récentes des grands navigateurs. Windows XP est encore aujourd’hui très utilisé. Selondeveloppez.com,Windows XP occupe encore une certaine part du marché total des OS. Cela peut sembler peu, mais comme je vous le disais précédemment, l’accessibilité, c’est aussi essayer de penser au plus grand nombre. Un exemple que je prends assez souvent : pendant très longtemps, les ordinateurs de l’Éducation nationale n’autorisaient pas l'exécution du JavaScript. Ainsi, vous deviez prendre cela en compte lors de vos développements. Autre point à avoir en tête : Android est actuellementl’OS le plus utilisé sous mobile. Cela dit, Android 11 est majoritairement utilisée, avec23% de parts de marché, suivi de près par Android 10 et Android 13. Ces versions les plus anciennes, notamment les 4 et 5, ont parfois des difficultés à parcourir des sites réalisés via desframeworks JavaScript. Dans le cas de la structuration de votre page HTML, le principe de l’attributrolesera de définir avec plus de précisionl’utilité ou la fonctiond’un élément ou d’un groupe d’éléments. Nous avons plus haut un exemple avecl’attributrole=”search”quipermet d’identifierqu’une section de la page est dédiée à unefonctionnalité de recherche. Voici un deuxième exemple, cette fois-ci en rapport avec un svg : Dans le code ci-dessus, nous pouvons voir quel’attribut role a pour valeurimg. Ce rôle permet au screen reader d’identifier cet élément comme une image. Ici, la balisetitlepermet de donner le rôle à l’image. Pour connaître tous les rôles existants, je vous invite à vous référer àla liste de rôles fournie par le W3C. Il arrive parfois que votrepage comprenne plusieurs balises de même type. Par exemple, votre page contient plusieurs menus de navigation ou plusieurs balisesasidepour des contenus complémentaires. Vous vous en souvenez peut-être, je vous ai déjà présenté cette balise, ou du moins, vous l’avez déjà vue. :)L’aria-label permet de nommer une région de façon “invisible”. En fait, ce n’est pas tout à fait invisible, puisque l’information est à destination des équipements d’assistance, tels qu’un screen-reader. Vous allez utiliser cet attribut pour donner unlibelléà votre région. Par exemple, vous pouvez utiliser l’aria-label pour : identifier plusieurs menus de navigation:aria-label=”Navigation Principale”etaria-label=”Navigation Secondaire”; distinguer plusieurs zones de contenu complémentaires(aside). Sur un site de recettes, un aside pourrait être dédié aux ustensiles de la recette, tandis que l’autre serait plutôt pour du contenu publicitaire. Dans le cas où votre conteneur – une section ou un menu de navigation, par exemple – comprend un titre descriptif, vous allez pouvoir faire“pointer” le conteneur vers ce titrepour donner un sens à cette section. Si on reprend l’exemple de GitHub et des repository vu précédemment, vous pouvez voir que la valeur de l’attributlabelledbyfait référence au titre de cette section. Autrement dit, elle permet d’identifier cette section (par les screen readers) comme un groupement de liens vers des repositories. L’avantage de cette méthode est sa plus grandecompatibilitéavec d’anciens navigateurs. Cela dit, la valeur de l’attributlabelledbypointe vers un attribut id. Ce sera donc un élément présent une seule fois sur la page. Dans cette section, nous reprenons le projetTonight In Gothamet l’implémentons peu à peu, pour mettre en pratique les compétences vues dans le chapitre. Retrouvez le code complet du projet que j’ai codé en respectant les bonnes pratiques d’accessibilité surce projet GitHub. L’objectif de ce projet n’est pas de se concentrer sur le HTML ou le CSS en lui-même, mais bien sur ses impacts sur l’accessibilité, et sur les règles à respecter pour le rendre utilisable par le plus grand nombre. Parmi les maquettes présentes dans le Figma fourni par les designers, la maquette ci-dessous est particulièrement pratique, car elle vous permet de voir les différentes parties composant le projet. J’ai implémenté le code de la page web en essayant de prendre le plus possible en compte toutes les recommandations d’accessibilité que je vous explique dans ce cours. En vous rendant sur le code HTML du projet, vous pouvez voir les élémentsstructurantssuivants : Les balises utilisées pour structurer la page sontsémantiques. Notre page est composée d’une baliseheader, d’une balisemainet d’une balisefooter. La baliseheaderutilise l’attributrole=”banner”qui permet d’indiquer que cet élément est l’en-tête principal : La balisefooterutilise l’attributrole=”contentinfo”. De plus, comme notre projet utilise plusieurs menus de navigation, nous les différencions grâce aux attributsaria-label(où l’un est le menu de navigation principal et l’autre le menu de navigation du pied de page) : Enfin, vous pouvez constater qu’il y a un champ de recherche. Comme nous l’avons vu dans le cours, ce champ est identifié comme champ de recherche via l’attributrole=”search”. Maintenant que les grands éléments structurant notre page sont en place, nous allons pouvoir nous intéresser à lanavigation. Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Optimisez la sémantique de votre page avec HTML5,"Si vous n'êtes pas à l'aise avec l'utilisation des différentes balises en HTML, je vous invite à suivre le cours “Apprenez à créer votre site web avec HTML5 et CSS3” avant de poursuivre. Les balises HTML5 (header,nav,main,section…) vous permettent de définir simplement des zones, ourégions, à votre page.Elles sont liées au HTML sémantique. La sémantique, en HTML, est l’utilisation de balises ayant un sens. Quand vous utilisez une balisearticlepour un article de blog ounavpour votre menu de navigation, vous attribuez explicitement unrôleà cet élément. A contrario, quand vous utilisez une balise div ou span, cette dernière n’est porteuse d’aucune information. Elle ne nous renseigne pas sur son rôle. Si la sémantique vous intéresse, je vous invite à lire l’excellent livreAdaptive Web Designainsi quecet article du blog SEMrush. Afin de faciliter la lecture de votre page par des outils d’accessibilité, nous allons voir comment utiliser les bonnes balises pour structurer votre page. Sachezqu’une mauvaise utilisation ou une absence de balisene permettra pas aux technologies d'assistance de bien traduire le site. Grâce au HTML5, nous pouvons définir, de façon native, différentes régions à notre page.Elles donnent du sens au différentes zones de votre page. Voici un bref rappel des balises HTML5 à utiliser, ainsi que de leur signification sémantique : L’en-tête de la page; peut contenir le logo, une barre de recherche et le menu de navigation. Peut aussi être utilisé à l’intérieur d’une balise article ou section. Dans ce cas, le header ne sera associé qu’à cette section, et non à la page toute entière. Utilisé pour identifier le menu de navigation de la page. Sur certains projets, vous aurez parfois plusieurs blocs de navigation. Il vous faudra utiliser les labelsARIApour préciser de quelle navigation il s’agit. Les attributs ARIA (pourAccessible Rich Internet Applications) sont unensemble d’attributs HTMLqui vont vous permettre de rendre vos applications accessibles. Si vous n’êtes pas encore totalement familier avec, vous pouvez dès à présent suivre le coursConcevez un contenu web accessible. Par exemple : Dans l’exemple ci-dessous, vous pouvez voir deux menus de navigation (un principal et un secondaire). Ces derniers sont identifiés par des attributsaria-labelqui renseignent sur le type de navigation de ces blocs. Source :Documentation de Bootstrap. Utilisé pour identifier la région principale de votre page; le contenu à l’intérieur est susceptible de changer selon les pages (à la différence de votre menu de navigation). Balise regroupant un même sujet ou une même fonctionnalité. Commence généralement par un titre. Article de blog, ou recette de cuisine, par exemple. Balise regroupant uncontenu complémentairedu contenu principal. Balise de conclusion (soit pour la page entière, soit pour une section). Comme avec le header, vous pouvez intégrer un footer dans un article ou dans une section. Cela dit, il faudra penser à intégrer un aria de type label pour définir en quoi cette région est différente de vos autres balises footer au sein de votre page. Maintenant que nous avons revu les principales balises du HTML5, nous allons commencer à utiliser les attributs ARIA pour aller plus loin. En complément des balises sémantiques du HTML5, vous pouvez tout à fait utiliser lesattributsrolepour avoir unecompatibilité renforcéeavec l’ensemble des navigateurs. Selon le W3C, les attributs ARIA peuvent définir : la naturede l’élément (un menu de navigation, par exemple) ; l’actionde l’élément (il ouvre une modale) ; l’étatde l’élément (un menu dropdown ouvert ou fermé, par exemple). Ces attributs auront parfois le même sens que les balises HTML5 (pour les balises type nav ou header, par exemple). Cela dit, parfois, ces attributs apporterontun sens bien plus précispour une barre de recherche ou une bannière, par exemple. Source : code extrait de lapage d’accueil de GitHub. Par exemple, dans le code ci-dessus, nous pouvons constater que : on a donné à ladivun rôle de recherche ; sa fonction précise est de chercher un repository GitHub. Les versions modernes de nos navigateurs préférés (Firefox, Chrome, Safari) supportent très bien le HTML5 et n’ont pas besoin de ces attributs pour comprendre le sens et le rôle d’une balise. Cela dit, quand on pense accessibilité, il faut toujours penser au plus grand nombre et auxnavigateurs qu’utilisent vos utilisateurs. Par exemple, il se peut que : vos utilisateurs n’utilisent pas des navigateurs modernes parce qu’ils n’y sont pas autorisés. Dans les grandes entreprises, votre machine estconfigurée par la DSI. Vous n’aurez pas le choix concernant votre navigateur et vos outils ; leur matériel ne permette pas l’installation des versions récentes des grands navigateurs. Windows XP est encore aujourd’hui très utilisé. Selondeveloppez.com,Windows XP occupe encore une certaine part du marché total des OS. Cela peut sembler peu, mais comme je vous le disais précédemment, l’accessibilité, c’est aussi essayer de penser au plus grand nombre. Un exemple que je prends assez souvent : pendant très longtemps, les ordinateurs de l’Éducation nationale n’autorisaient pas l'exécution du JavaScript. Ainsi, vous deviez prendre cela en compte lors de vos développements. Autre point à avoir en tête : Android est actuellementl’OS le plus utilisé sous mobile. Cela dit, Android 11 est majoritairement utilisée, avec23% de parts de marché, suivi de près par Android 10 et Android 13. Ces versions les plus anciennes, notamment les 4 et 5, ont parfois des difficultés à parcourir des sites réalisés via desframeworks JavaScript. Dans le cas de la structuration de votre page HTML, le principe de l’attributrolesera de définir avec plus de précisionl’utilité ou la fonctiond’un élément ou d’un groupe d’éléments. Nous avons plus haut un exemple avecl’attributrole=”search”quipermet d’identifierqu’une section de la page est dédiée à unefonctionnalité de recherche. Voici un deuxième exemple, cette fois-ci en rapport avec un svg : Dans le code ci-dessus, nous pouvons voir quel’attribut role a pour valeurimg. Ce rôle permet au screen reader d’identifier cet élément comme une image. Ici, la balisetitlepermet de donner le rôle à l’image. Pour connaître tous les rôles existants, je vous invite à vous référer àla liste de rôles fournie par le W3C. Il arrive parfois que votrepage comprenne plusieurs balises de même type. Par exemple, votre page contient plusieurs menus de navigation ou plusieurs balisesasidepour des contenus complémentaires. Vous vous en souvenez peut-être, je vous ai déjà présenté cette balise, ou du moins, vous l’avez déjà vue. :)L’aria-label permet de nommer une région de façon “invisible”. En fait, ce n’est pas tout à fait invisible, puisque l’information est à destination des équipements d’assistance, tels qu’un screen-reader. Vous allez utiliser cet attribut pour donner unlibelléà votre région. Par exemple, vous pouvez utiliser l’aria-label pour : identifier plusieurs menus de navigation:aria-label=”Navigation Principale”etaria-label=”Navigation Secondaire”; distinguer plusieurs zones de contenu complémentaires(aside). Sur un site de recettes, un aside pourrait être dédié aux ustensiles de la recette, tandis que l’autre serait plutôt pour du contenu publicitaire. Dans le cas où votre conteneur – une section ou un menu de navigation, par exemple – comprend un titre descriptif, vous allez pouvoir faire“pointer” le conteneur vers ce titrepour donner un sens à cette section. Si on reprend l’exemple de GitHub et des repository vu précédemment, vous pouvez voir que la valeur de l’attributlabelledbyfait référence au titre de cette section. Autrement dit, elle permet d’identifier cette section (par les screen readers) comme un groupement de liens vers des repositories. L’avantage de cette méthode est sa plus grandecompatibilitéavec d’anciens navigateurs. Cela dit, la valeur de l’attributlabelledbypointe vers un attribut id. Ce sera donc un élément présent une seule fois sur la page. Dans cette section, nous reprenons le projetTonight In Gothamet l’implémentons peu à peu, pour mettre en pratique les compétences vues dans le chapitre. Retrouvez le code complet du projet que j’ai codé en respectant les bonnes pratiques d’accessibilité surce projet GitHub. L’objectif de ce projet n’est pas de se concentrer sur le HTML ou le CSS en lui-même, mais bien sur ses impacts sur l’accessibilité, et sur les règles à respecter pour le rendre utilisable par le plus grand nombre. Parmi les maquettes présentes dans le Figma fourni par les designers, la maquette ci-dessous est particulièrement pratique, car elle vous permet de voir les différentes parties composant le projet. J’ai implémenté le code de la page web en essayant de prendre le plus possible en compte toutes les recommandations d’accessibilité que je vous explique dans ce cours. En vous rendant sur le code HTML du projet, vous pouvez voir les élémentsstructurantssuivants : Les balises utilisées pour structurer la page sontsémantiques. Notre page est composée d’une baliseheader, d’une balisemainet d’une balisefooter. La baliseheaderutilise l’attributrole=”banner”qui permet d’indiquer que cet élément est l’en-tête principal : La balisefooterutilise l’attributrole=”contentinfo”. De plus, comme notre projet utilise plusieurs menus de navigation, nous les différencions grâce aux attributsaria-label(où l’un est le menu de navigation principal et l’autre le menu de navigation du pied de page) : Enfin, vous pouvez constater qu’il y a un champ de recherche. Comme nous l’avons vu dans le cours, ce champ est identifié comme champ de recherche via l’attributrole=”search”. Maintenant que les grands éléments structurant notre page sont en place, nous allons pouvoir nous intéresser à lanavigation. Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Utilisez les rôles en complément des balises HTML5,"En complément des balises sémantiques du HTML5, vous pouvez tout à fait utiliser lesattributsrolepour avoir unecompatibilité renforcéeavec l’ensemble des navigateurs. Selon le W3C, les attributs ARIA peuvent définir : la naturede l’élément (un menu de navigation, par exemple) ; l’actionde l’élément (il ouvre une modale) ; l’étatde l’élément (un menu dropdown ouvert ou fermé, par exemple). Ces attributs auront parfois le même sens que les balises HTML5 (pour les balises type nav ou header, par exemple). Cela dit, parfois, ces attributs apporterontun sens bien plus précispour une barre de recherche ou une bannière, par exemple. Source : code extrait de lapage d’accueil de GitHub. Par exemple, dans le code ci-dessus, nous pouvons constater que : on a donné à ladivun rôle de recherche ; sa fonction précise est de chercher un repository GitHub. Les versions modernes de nos navigateurs préférés (Firefox, Chrome, Safari) supportent très bien le HTML5 et n’ont pas besoin de ces attributs pour comprendre le sens et le rôle d’une balise. Cela dit, quand on pense accessibilité, il faut toujours penser au plus grand nombre et auxnavigateurs qu’utilisent vos utilisateurs. Par exemple, il se peut que : vos utilisateurs n’utilisent pas des navigateurs modernes parce qu’ils n’y sont pas autorisés. Dans les grandes entreprises, votre machine estconfigurée par la DSI. Vous n’aurez pas le choix concernant votre navigateur et vos outils ; leur matériel ne permette pas l’installation des versions récentes des grands navigateurs. Windows XP est encore aujourd’hui très utilisé. Selondeveloppez.com,Windows XP occupe encore une certaine part du marché total des OS. Cela peut sembler peu, mais comme je vous le disais précédemment, l’accessibilité, c’est aussi essayer de penser au plus grand nombre. Un exemple que je prends assez souvent : pendant très longtemps, les ordinateurs de l’Éducation nationale n’autorisaient pas l'exécution du JavaScript. Ainsi, vous deviez prendre cela en compte lors de vos développements. Autre point à avoir en tête : Android est actuellementl’OS le plus utilisé sous mobile. Cela dit, Android 11 est majoritairement utilisée, avec23% de parts de marché, suivi de près par Android 10 et Android 13. Ces versions les plus anciennes, notamment les 4 et 5, ont parfois des difficultés à parcourir des sites réalisés via desframeworks JavaScript. Dans le cas de la structuration de votre page HTML, le principe de l’attributrolesera de définir avec plus de précisionl’utilité ou la fonctiond’un élément ou d’un groupe d’éléments. Nous avons plus haut un exemple avecl’attributrole=”search”quipermet d’identifierqu’une section de la page est dédiée à unefonctionnalité de recherche. Voici un deuxième exemple, cette fois-ci en rapport avec un svg : Dans le code ci-dessus, nous pouvons voir quel’attribut role a pour valeurimg. Ce rôle permet au screen reader d’identifier cet élément comme une image. Ici, la balisetitlepermet de donner le rôle à l’image. Pour connaître tous les rôles existants, je vous invite à vous référer àla liste de rôles fournie par le W3C. Il arrive parfois que votrepage comprenne plusieurs balises de même type. Par exemple, votre page contient plusieurs menus de navigation ou plusieurs balisesasidepour des contenus complémentaires. Vous vous en souvenez peut-être, je vous ai déjà présenté cette balise, ou du moins, vous l’avez déjà vue. :)L’aria-label permet de nommer une région de façon “invisible”. En fait, ce n’est pas tout à fait invisible, puisque l’information est à destination des équipements d’assistance, tels qu’un screen-reader. Vous allez utiliser cet attribut pour donner unlibelléà votre région. Par exemple, vous pouvez utiliser l’aria-label pour : identifier plusieurs menus de navigation:aria-label=”Navigation Principale”etaria-label=”Navigation Secondaire”; distinguer plusieurs zones de contenu complémentaires(aside). Sur un site de recettes, un aside pourrait être dédié aux ustensiles de la recette, tandis que l’autre serait plutôt pour du contenu publicitaire. Dans le cas où votre conteneur – une section ou un menu de navigation, par exemple – comprend un titre descriptif, vous allez pouvoir faire“pointer” le conteneur vers ce titrepour donner un sens à cette section. Si on reprend l’exemple de GitHub et des repository vu précédemment, vous pouvez voir que la valeur de l’attributlabelledbyfait référence au titre de cette section. Autrement dit, elle permet d’identifier cette section (par les screen readers) comme un groupement de liens vers des repositories. L’avantage de cette méthode est sa plus grandecompatibilitéavec d’anciens navigateurs. Cela dit, la valeur de l’attributlabelledbypointe vers un attribut id. Ce sera donc un élément présent une seule fois sur la page. Dans cette section, nous reprenons le projetTonight In Gothamet l’implémentons peu à peu, pour mettre en pratique les compétences vues dans le chapitre. Retrouvez le code complet du projet que j’ai codé en respectant les bonnes pratiques d’accessibilité surce projet GitHub. L’objectif de ce projet n’est pas de se concentrer sur le HTML ou le CSS en lui-même, mais bien sur ses impacts sur l’accessibilité, et sur les règles à respecter pour le rendre utilisable par le plus grand nombre. Parmi les maquettes présentes dans le Figma fourni par les designers, la maquette ci-dessous est particulièrement pratique, car elle vous permet de voir les différentes parties composant le projet. J’ai implémenté le code de la page web en essayant de prendre le plus possible en compte toutes les recommandations d’accessibilité que je vous explique dans ce cours. En vous rendant sur le code HTML du projet, vous pouvez voir les élémentsstructurantssuivants : Les balises utilisées pour structurer la page sontsémantiques. Notre page est composée d’une baliseheader, d’une balisemainet d’une balisefooter. La baliseheaderutilise l’attributrole=”banner”qui permet d’indiquer que cet élément est l’en-tête principal : La balisefooterutilise l’attributrole=”contentinfo”. De plus, comme notre projet utilise plusieurs menus de navigation, nous les différencions grâce aux attributsaria-label(où l’un est le menu de navigation principal et l’autre le menu de navigation du pied de page) : Enfin, vous pouvez constater qu’il y a un champ de recherche. Comme nous l’avons vu dans le cours, ce champ est identifié comme champ de recherche via l’attributrole=”search”. Maintenant que les grands éléments structurant notre page sont en place, nous allons pouvoir nous intéresser à lanavigation. Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Définissez les régions de votre page avec ARIA,"Il arrive parfois que votrepage comprenne plusieurs balises de même type. Par exemple, votre page contient plusieurs menus de navigation ou plusieurs balisesasidepour des contenus complémentaires. Vous vous en souvenez peut-être, je vous ai déjà présenté cette balise, ou du moins, vous l’avez déjà vue. :)L’aria-label permet de nommer une région de façon “invisible”. En fait, ce n’est pas tout à fait invisible, puisque l’information est à destination des équipements d’assistance, tels qu’un screen-reader. Vous allez utiliser cet attribut pour donner unlibelléà votre région. Par exemple, vous pouvez utiliser l’aria-label pour : identifier plusieurs menus de navigation:aria-label=”Navigation Principale”etaria-label=”Navigation Secondaire”; distinguer plusieurs zones de contenu complémentaires(aside). Sur un site de recettes, un aside pourrait être dédié aux ustensiles de la recette, tandis que l’autre serait plutôt pour du contenu publicitaire. Dans le cas où votre conteneur – une section ou un menu de navigation, par exemple – comprend un titre descriptif, vous allez pouvoir faire“pointer” le conteneur vers ce titrepour donner un sens à cette section. Si on reprend l’exemple de GitHub et des repository vu précédemment, vous pouvez voir que la valeur de l’attributlabelledbyfait référence au titre de cette section. Autrement dit, elle permet d’identifier cette section (par les screen readers) comme un groupement de liens vers des repositories. L’avantage de cette méthode est sa plus grandecompatibilitéavec d’anciens navigateurs. Cela dit, la valeur de l’attributlabelledbypointe vers un attribut id. Ce sera donc un élément présent une seule fois sur la page. Dans cette section, nous reprenons le projetTonight In Gothamet l’implémentons peu à peu, pour mettre en pratique les compétences vues dans le chapitre. Retrouvez le code complet du projet que j’ai codé en respectant les bonnes pratiques d’accessibilité surce projet GitHub. L’objectif de ce projet n’est pas de se concentrer sur le HTML ou le CSS en lui-même, mais bien sur ses impacts sur l’accessibilité, et sur les règles à respecter pour le rendre utilisable par le plus grand nombre. Parmi les maquettes présentes dans le Figma fourni par les designers, la maquette ci-dessous est particulièrement pratique, car elle vous permet de voir les différentes parties composant le projet. J’ai implémenté le code de la page web en essayant de prendre le plus possible en compte toutes les recommandations d’accessibilité que je vous explique dans ce cours. En vous rendant sur le code HTML du projet, vous pouvez voir les élémentsstructurantssuivants : Les balises utilisées pour structurer la page sontsémantiques. Notre page est composée d’une baliseheader, d’une balisemainet d’une balisefooter. La baliseheaderutilise l’attributrole=”banner”qui permet d’indiquer que cet élément est l’en-tête principal : La balisefooterutilise l’attributrole=”contentinfo”. De plus, comme notre projet utilise plusieurs menus de navigation, nous les différencions grâce aux attributsaria-label(où l’un est le menu de navigation principal et l’autre le menu de navigation du pied de page) : Enfin, vous pouvez constater qu’il y a un champ de recherche. Comme nous l’avons vu dans le cours, ce champ est identifié comme champ de recherche via l’attributrole=”search”. Maintenant que les grands éléments structurant notre page sont en place, nous allons pouvoir nous intéresser à lanavigation. Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
Tonight In Gotham : Réalisez la structure de la page de Batman,"Dans cette section, nous reprenons le projetTonight In Gothamet l’implémentons peu à peu, pour mettre en pratique les compétences vues dans le chapitre. Retrouvez le code complet du projet que j’ai codé en respectant les bonnes pratiques d’accessibilité surce projet GitHub. L’objectif de ce projet n’est pas de se concentrer sur le HTML ou le CSS en lui-même, mais bien sur ses impacts sur l’accessibilité, et sur les règles à respecter pour le rendre utilisable par le plus grand nombre. Parmi les maquettes présentes dans le Figma fourni par les designers, la maquette ci-dessous est particulièrement pratique, car elle vous permet de voir les différentes parties composant le projet. J’ai implémenté le code de la page web en essayant de prendre le plus possible en compte toutes les recommandations d’accessibilité que je vous explique dans ce cours. En vous rendant sur le code HTML du projet, vous pouvez voir les élémentsstructurantssuivants : Les balises utilisées pour structurer la page sontsémantiques. Notre page est composée d’une baliseheader, d’une balisemainet d’une balisefooter. La baliseheaderutilise l’attributrole=”banner”qui permet d’indiquer que cet élément est l’en-tête principal : La balisefooterutilise l’attributrole=”contentinfo”. De plus, comme notre projet utilise plusieurs menus de navigation, nous les différencions grâce aux attributsaria-label(où l’un est le menu de navigation principal et l’autre le menu de navigation du pied de page) : Enfin, vous pouvez constater qu’il y a un champ de recherche. Comme nous l’avons vu dans le cours, ce champ est identifié comme champ de recherche via l’attributrole=”search”. Maintenant que les grands éléments structurant notre page sont en place, nous allons pouvoir nous intéresser à lanavigation. Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
En résumé,"Une bonne démarche d’accessibilité commence par la bonne utilisation des balises HTML : pensez aux balises sémantiques. Parfois, les balises HTML ne seront pas suffisantes pour donner des informations sur vos balises, si vous avez plusieurs balisesnavpar exemple. Les attributsaria, notammentaria-labelledby, seront là pour vous aider. Enfin, tirez parti desrolepour définir des régions spécifiques telles qu’une barre de recherche. Maintenant que nous avons appris comment structurer notre page web de façon accessible, nous allons à présent nous concentrer sur la navigation de notre site. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Le téléchargement des vidéos de nos cours est accessible pour les membres Premium. Vous pouvez toutefois les visionner en streaming gratuitement. Si vous aimez mes cours, vous aimerez : beta.nx.academy Inclusive designer and digital accessibility specialist from Toronto, Canada.          ",Lisa Liskovoi,"Inclusive designer and digital accessibility specialist from Toronto, Canada.",,,Codez un site web accessible avec HTML & CSS,6 heures
